# Docker build for the Nautilus Wallet server.
#
# See the top-level docker-compose.yaml for a simpler entrypoint into this Dockerfile.
#
# This build relies heavily on multi-stage build features. To help understand what's going on:
#
# - Run: grep -A1 'STAGE: .*' Dockerfile
# - See: Dockerfile.pdf (generated by `generate-Dockerfile.pdf.sh`)
#
# Stage naming convention:
#
#   base-*      A general base for later stages
#   *-builder   A base stage for building a kind of target
#   *-runner    A base stage for running a kind of target
#
#   build-*     Build a particular target
#   run-*       Run a particular target (probably built by a corresponding build-* stage)
#
#   *-sw        Variant for SW-mode SGX stages
#   *-hw        Variant for HW-mode SGX stages
#
# NOTE: This build uses a combination of both the `SGX_MODE` build arg for build stages,
# and SW/HW variants for run stages. Combining these incorrectly will result in an unusable image:
# a SW-mode runner can't run a target built for HW-mode, and vice versa.
# Docker doesn't allow eliminating this easily, so for now, the caller must match SGX_MODE with the runner variant.
#
# This assumes an up-to-date `.dockerignore`: see `generate-dockerignore.sh`

# Pre-stage build args:

ARG RUST_TOOLCHAIN="nightly-2021-03-25"

# Intel SGX SDK 2.14
# Docs: https://01.org/intel-softwareguard-extensions/downloads/intel-sgx-linux-2.14-release
ARG INTEL_SGX_SDK_INSTALLER_URL="https://download.01.org/intel-sgx/sgx-linux/2.14/distro/ubuntu20.04-server/sgx_linux_x64_sdk_2.14.100.2.bin"

# Latest stable Rust SGX SDK version for Intel SGX SDK 2.14
# Upstream PR for this revision: https://github.com/apache/incubator-teaclave-sgx-sdk/pull/346
ARG RUST_SGX_SDK_REVISION="d107bd0718f723221750a4f2973451b386cbf9d2"

ARG SGX_MODE="SW"

# STAGE: base
# Common base for both builder and runner stages, with apt caching, ca-certificates, and a non-root user
FROM ubuntu:20.04 AS base

RUN rm /etc/apt/apt.conf.d/docker-clean

RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,sharing=locked,target=/var/lib/apt \
    apt-get update && apt-get install -y -o APT::Keep-Downloaded-Packages=true \
    ca-certificates

RUN useradd user --create-home --uid 1000
USER user
WORKDIR /home/user

# STAGE: base-builder (from base)
# Base for builder stages, with build-essential, building under /build
FROM base AS base-builder

USER root
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,sharing=locked,target=/var/lib/apt \
    apt-get update && apt-get install -y -o APT::Keep-Downloaded-Packages=true \
    build-essential
USER user

WORKDIR /build

# STAGE: intel-sgx-sdk-provider (from base-builder, arg INTEL_SGX_SDK_INSTALLER_URL)
# This provides the Intel SGX SDK under /build/intel/sgxsdk
FROM base-builder AS intel-sgx-sdk-provider

ARG INTEL_SGX_SDK_INSTALLER_URL
ADD --chown=user:user "${INTEL_SGX_SDK_INSTALLER_URL}" /build/intel/sgx_linux_x64_sdk.bin

RUN chmod +x "/build/intel/sgx_linux_x64_sdk.bin"
RUN /build/intel/sgx_linux_x64_sdk.bin --prefix /build/intel

# STAGE: rust-sgx-sdk-provider (from base-builder, arg RUST_SGX_SDK_REVISION)
# This provides the Rust SGX SDK include files under /build/rust-sgx-sdk
FROM base-builder AS rust-sgx-sdk-provider

USER root
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,sharing=locked,target=/var/lib/apt \
    apt-get update && apt-get install -y -o APT::Keep-Downloaded-Packages=true \
    git
USER user

RUN git clone --no-checkout --filter=tree:0 https://github.com/apache/incubator-teaclave-sgx-sdk /build/rust-sgx-sdk
RUN git -C /build/rust-sgx-sdk sparse-checkout set /common /edl
ARG RUST_SGX_SDK_REVISION
RUN git -C /build/rust-sgx-sdk switch -d "${RUST_SGX_SDK_REVISION}"

# STAGE: rust-builder (from base-builder, arg RUST_TOOLCHAIN)
# Builder for Rust, with Rust toolchain and cargo build tools (bindgen) under /home/user/.cargo
FROM base-builder AS rust-builder

ADD --chown=user:user "https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init" /home/user/rustup-init
RUN chmod +rx /home/user/rustup-init
ARG RUST_TOOLCHAIN
RUN /home/user/rustup-init -y --no-modify-path --default-toolchain "${RUST_TOOLCHAIN}"

# Hack to initialise the crates.io cache.
RUN --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/home/user/.cargo/registry \
    --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/home/user/.cargo/git \
    . ~/.cargo/env && \
    cargo search --limit 0

# Requirements for bindgen: https://rust-lang.github.io/rust-bindgen/requirements.html
USER root
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,sharing=locked,target=/var/lib/apt \
    apt-get update && apt-get install -y -o APT::Keep-Downloaded-Packages=true \
    llvm-dev \
    libclang-dev \
    clang
USER user

RUN --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/home/user/.cargo/registry \
    --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/home/user/.cargo/git \
    . ~/.cargo/env && \
    cargo install bindgen

# STAGE: rust-sgx-builder (from rust-builder)
# Builder for Rust SGX, with the Intel and Rust SGX SDKs files
FROM rust-builder AS rust-sgx-builder

# Requirements for building the Rust SGX SDK packages.
USER root
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,sharing=locked,target=/var/lib/apt \
    apt-get update && apt-get install -y -o APT::Keep-Downloaded-Packages=true \
    libtool
USER user

COPY --from=intel-sgx-sdk-provider /build/intel/sgxsdk /build/intel/sgxsdk
COPY --from=rust-sgx-sdk-provider /build/rust-sgx-sdk /build/rust-sgx-sdk

# STAGE: web-server-builder (from rust-sgx-builder)
# Builder for this project, with source files under /build/web-server
FROM rust-sgx-builder AS web-server-builder

WORKDIR /build/web-server
COPY --chown=user . .

# STAGE: build-sgx-wallet-server (from web-server-builder, arg SGX_MODE)
# Build the sgx-wallet server, in the given mode.
FROM web-server-builder AS build-sgx-wallet-server

ARG SGX_MODE
RUN --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/home/user/.cargo/registry \
    --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/home/user/.cargo/git \
    --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/build/web-server/sgx-wallet/app/target \
    --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/build/web-server/sgx-wallet/enclave/target \
    . ~/.cargo/env && \
    . /build/intel/sgxsdk/environment && \
    CUSTOM_COMMON_PATH="/build/rust-sgx-sdk/common" \
    CUSTOM_EDL_PATH="/build/rust-sgx-sdk/edl" \
    SGX_MODE="${SGX_MODE}" \
    make -C sgx-wallet

# STAGE: build-sgx-wallet-test (from web-server-builder, arg SGX_MODE)
# Build the sgx-wallet tests, in the given mode.
FROM web-server-builder AS build-sgx-wallet-test

ARG SGX_MODE
RUN --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/home/user/.cargo/registry \
    --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/home/user/.cargo/git \
    --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/build/web-server/sgx-wallet-test/app/target \
    --mount=type=cache,sharing=locked,uid=1000,gid=1000,target=/build/web-server/sgx-wallet-test/enclave/target \
    . ~/.cargo/env && \
    . /build/intel/sgxsdk/environment && \
    CUSTOM_COMMON_PATH="/build/rust-sgx-sdk/common" \
    CUSTOM_EDL_PATH="/build/rust-sgx-sdk/edl" \
    SGX_MODE="${SGX_MODE}" \
    make -C sgx-wallet-test

# STAGE: base-sgx-runner-sw (FROM base)
# Base runner, with SW-mode SGX libraries.
FROM base AS base-sgx-runner-sw

USER root
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,sharing=locked,target=/var/lib/apt \
    apt-get update && apt-get install -y -o APT::Keep-Downloaded-Packages=true \
    libssl1.1
USER user

COPY --from=intel-sgx-sdk-provider /build/intel/sgxsdk/lib64 /build/intel/sgxsdk/lib64
COPY --from=intel-sgx-sdk-provider /build/intel/sgxsdk/sdk_libs /build/intel/sgxsdk/sdk_libs

ENV LD_LIBRARY_PATH=/build/intel/sgxsdk/sdk_libs

# STAGE: base-sgx-runner-hw (FROM base)
# Base runner, with HW-mode SGX libraries.
FROM base AS base-sgx-runner-hw

USER root
# Requirements for apt-key
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,sharing=locked,target=/var/lib/apt \
    apt-get update && apt-get install -y -o APT::Keep-Downloaded-Packages=true \
    gnupg
# Docs: https://download.01.org/intel-sgx/sgx-linux/2.14/docs/Intel_SGX_SW_Installation_Guide_for_Linux.pdf
ADD "https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key" /build/intel/intel-sgx-deb.key
RUN apt-key add /build/intel/intel-sgx-deb.key
RUN echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu focal main' >/etc/apt/sources.list.d/intel-sgx.list
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,sharing=locked,target=/var/lib/apt \
    apt-get update && apt-get install -y -o APT::Keep-Downloaded-Packages=true \
    libsgx-epid \
    libsgx-quote-ex \
    libsgx-dcap-ql
USER user

CMD /app/sgx-wallet-app

# STAGE: run-sgx-wallet-server-sw (from base-sgx-runner-sw)
# Run the sgx-wallet server in SW mode.
FROM base-sgx-runner-sw AS run-sgx-wallet-server-sw

WORKDIR /app
COPY --from=build-sgx-wallet-server /build/web-server/sgx-wallet/build/bin/enclave.signed.so /app
COPY --from=build-sgx-wallet-server /build/web-server/sgx-wallet/build/bin/sgx-wallet-app /app
RUN mkdir /app/wallet_store
VOLUME /app/wallet_store
CMD /app/sgx-wallet-app

# STAGE: run-sgx-wallet-server-hw (from base-sgx-runner-hw)
# Run the sgx-wallet server in HW mode.
FROM base-sgx-runner-hw AS run-sgx-wallet-server-hw

WORKDIR /app
COPY --from=build-sgx-wallet-server /build/web-server/sgx-wallet/build/bin/enclave.signed.so /app
COPY --from=build-sgx-wallet-server /build/web-server/sgx-wallet/build/bin/sgx-wallet-app /app
RUN mkdir /app/wallet_store
VOLUME /app/wallet_store
CMD /app/sgx-wallet-app

# STAGE: run-sgx-wallet-test-sw (from base-sgx-runner-sw)
# Run the sgx-wallet tests in SW mode.
FROM base-sgx-runner-sw AS run-sgx-wallet-test-sw

WORKDIR /app
COPY --from=build-sgx-wallet-test /build/web-server/sgx-wallet-test/build/bin/enclave.signed.so /app
COPY --from=build-sgx-wallet-test /build/web-server/sgx-wallet-test/build/bin/sgx-wallet-test-app /app
RUN mkdir /app/wallet_store
VOLUME /app/wallet_store
VOLUME /tmp
CMD /app/sgx-wallet-test-app

# STAGE: run-sgx-wallet-test-hw (from base-sgx-runner-hw)
# Run the sgx-wallet tests in HW mode.
FROM base-sgx-runner-hw AS run-sgx-wallet-test-hw

WORKDIR /app
COPY --from=build-sgx-wallet-test /build/web-server/sgx-wallet-test/build/bin/enclave.signed.so /app
COPY --from=build-sgx-wallet-test /build/web-server/sgx-wallet-test/build/bin/sgx-wallet-test-app /app
RUN mkdir /app/wallet_store
VOLUME /app/wallet_store
VOLUME /tmp
CMD /app/sgx-wallet-test-app
